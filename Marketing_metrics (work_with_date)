with cte2 as
 (
  with cte1 as 
    (
         select
         ad_date,
         url_parameters,
         coalesce (spend,0) as spend,
         coalesce (impressions,0) as impressions,
         coalesce (reach,0) as reach,
         coalesce(clicks,0) as clicks,
         coalesce (leads,0) as leads,
         coalesce(value,0) as value,
         campaign_name,
         adset_name 
         from facebook_ads_basic_daily
         left join facebook_campaign on facebook_ads_basic_daily.campaign_id = facebook_campaign.campaign_id 
         left join facebook_adset on facebook_ads_basic_daily.adset_id = facebook_adset.adset_id
         where ad_date notnull 
      union 
         select 
         ad_date,
         url_parameters,
         coalesce (spend,0) as spend,
         coalesce (impressions,0) as impressions,
         coalesce (reach,0) as reach,
         coalesce(clicks,0) as clicks,
         coalesce (leads,0) as leads,
         coalesce(value,0) as value, 
         campaign_name,
         adset_name 
         from google_ads_basic_daily 
         where ad_date notnull 
     )    
   select
      --concat(date_part('year',ad_date),'-', date_part('month',ad_date), '-01') as ad_month,
      url_parameters,
      case 
        when date_part('month',ad_date) >9 then concat(date_part('year',ad_date),'-', date_part('month',ad_date),'-0', (date_part('day',ad_date)- date_part('day',ad_date)+1)) 
        else concat(date_part('year',ad_date),'-0', date_part('month',ad_date),'-0', (date_part('day',ad_date)- date_part('day',ad_date)+1)) 
      end ad_month,
      trim('utm_campaign=' from substring (url_parameters,position ('utm_campaign=' in url_parameters))) as utm_campaign,
      sum(spend) as total_spend,
      sum(impressions) as total_impressions,
      sum(clicks) as total_clicks,
      sum(value) as total_value,
           case 
           when sum(clicks) = 0 then 0
           when sum(clicks) <>0 then sum(spend)/sum(clicks)
           end CPC,
         case 
         when sum(impressions)=0 then 0
         when sum(impressions)<>0 then cast(cast(sum(spend) as float)/cast (sum(impressions) as float)*1000 as int)
         end CPM,
             case 
             when sum(impressions)=0 then 0
             when sum(impressions)<>0 then cast(cast(sum(clicks) as float)/cast (sum(impressions) as float)*100 as int)
             end CTR,
          case 
          when sum(spend)=0 then 0
          when sum(spend)<>0 then round( (cast(sum(value)as float)-cast(sum(spend)as float))/sum(spend)*100)
          end ROMI
    from cte1
    group by ad_month, url_parameters
    )
    --
select 
     ad_month,
     utm_campaign,
     sum (total_spend) as total_spend_of_cmpgn,
     sum (total_impressions) as total_impressions_of_cmpgn,
     sum (total_clicks) as total_clicks_of_cmpgn,
     sum (total_value) as total_value_of_cmpgn,
     sum (CPC) as CPC_of_cmpgn,
     sum (CTR) as current_CTR,
     case 
     	when sum (CTR) = 0 then 0
     	when sum (CTR)>0 then (sum (CTR) - lead (sum (CTR),1) over (partition by utm_campaign order by ad_month))*100/sum (CTR)
     end diff_beetween_cur_and_prev_CTR_in_proc,
     sum (CPM) as current_CPM,
     case
     	when sum (CPM) = 0 then 0
     	when sum (CPM)>0 then (sum (CPM) - lead (sum (CPM),1) over (partition by utm_campaign order by ad_month))*100/sum (CPM)
     end diff_beetween_cur_and_prev_CPM_in_proc,
     sum(ROMI) as current_ROMI,
     case 
     	when sum (ROMI) = 0 then 0
     	when sum (ROMI) > 0 then round ((sum (ROMI) - lead (sum (ROMI),1) over (partition by utm_campaign order by ad_month))*100/sum (ROMI))
     end diff_beetween_cur_and_prev_ROMI_in_proc
from cte2
group by ad_month, utm_campaign
order by ad_month
